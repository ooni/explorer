import { useMemo, useState } from 'react'
import { useIntl } from 'react-intl'

import Filters from './Filters'
import GridChart, {
  prepareDataForGridChart,
  preparePipelineV5DataForGridChart,
} from './GridChart'

const prepareDataforTable = (data, query, locale) => {
  const table = []

  const [reshapedData, rows, rowLabels] = query.loni
    ? preparePipelineV5DataForGridChart(data, query, locale)
    : prepareDataForGridChart(data, query, locale)

  const countKeys =
    query.loni === 'outcome'
      ? ['outcome_blocked', 'outcome_down', 'outcome_ok']
      : query.loni === 'dns_isp'
        ? ['dns_isp_blocked', 'dns_isp_down', 'dns_isp_ok']
        : query.loni === 'dns_other'
          ? ['dns_other_blocked', 'dns_other_down', 'dns_other_ok']
          : query.loni === 'tls'
            ? ['tls_blocked', 'tls_down', 'tls_ok']
            : query.loni === 'tcp'
              ? ['tcp_blocked', 'tcp_down', 'tcp_ok']
              : [
                  'anomaly_count',
                  'confirmed_count',
                  'failure_count',
                  'measurement_count',
                ]

  for (const [key, rowData] of reshapedData) {
    const row = {
      [query.axis_y]: key,
      rowLabel: rowLabels[key],
      anomaly_count: 0,
      confirmed_count: 0,
      failure_count: 0,
      measurement_count: 0,
      outcome_blocked: 0,
      outcome_down: 0,
      outcome_ok: 0,
      dns_isp_blocked: 0,
      dns_isp_down: 0,
      dns_isp_ok: 0,
      dns_other_blocked: 0,
      dns_other_down: 0,
      dns_other_ok: 0,
      tls_blocked: 0,
      tls_down: 0,
      tls_ok: 0,
      tcp_blocked: 0,
      tcp_down: 0,
    }

    for (const d of rowData) {
      for (const countKey of countKeys) {
        row[countKey] = row[countKey] + d[countKey]
      }
    }

    table.push(row)
  }
  return [reshapedData, table, rows, rowLabels]
}

// This same reference is passed to GridChart when there are no rows to filter out
// Maybe this can also be `[]`
const noRowsSelected = null

const TableView = ({ data, query, showFilters = true }) => {
  const intl = useIntl()

  // The incoming data is reshaped to generate:
  // - reshapedData: holds the full set that will be used by GridChart
  //   to then filter out rows based on `selectedRows` generated by the table
  // - tableData: this has aggregated counts and labels for each row to be
  //   displayed in GridChart. It allows to easily filter and sort aggregate data
  // - indexes -
  const [reshapedData, tableData, rowKeys, rowLabels] = useMemo(() => {
    try {
      return prepareDataforTable(data, query, intl.locale)
    } catch (e) {
      return [null, [], [], {}]
    }
  }, [query, data, intl.locale])

  const [dataForCharts, setDataForCharts] = useState(noRowsSelected)

  return (
    <div className="flex flex-col">
      {showFilters && (
        <Filters
          query={query}
          data={tableData}
          setDataForCharts={setDataForCharts}
        />
      )}
      <GridChart
        data={reshapedData}
        selectedRows={dataForCharts}
        rowKeys={rowKeys}
        rowLabels={rowLabels}
      />
    </div>
  )
}

export default TableView
