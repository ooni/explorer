import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'
import { useTable, useFlexLayout, useRowSelect, useSortBy, useGlobalFilter, useAsyncDebounce } from 'react-table'
import { FormattedMessage, useIntl } from 'react-intl'
import styled from 'styled-components'
import { Flex, Box, Button, Text } from 'ooni-components'

import GridChart, { prepareDataForGridChart } from './GridChart'
import { ResizableBox } from './Resizable'
import { DetailsBox } from '../../measurement/DetailsBox'
import { sortRows } from './computations'
import Filters from './Filters'

const prepareDataforTable = (data, query) => {
  const table = []
  
  const [reshapedData, rows, rowLabels] = prepareDataForGridChart(data, query)

  for (const [key, rowData] of reshapedData) {

    const countKeys = ['anomaly_count', 'confirmed_count', 'failure_count', 'measurement_count']
    
    const row = {
      [query.axis_y]: key,
      rowLabel: rowLabels[key],
      anomaly_count: 0,
      confirmed_count: 0,
      failure_count: 0,
      measurement_count: 0,
    }

    rowData.forEach(d => {
      countKeys.forEach(countKey => {
        row[countKey] = row[countKey] + d[countKey]
      })
    })

    table.push(row)
  }
  return [reshapedData, table, rows, rowLabels]
}

// This same reference is passed to GridChart when there are no rows to filter out
// Maybe this can also be `[]`
const noRowsSelected = null

const TableView = ({ data, query }) => {
  const intl = useIntl()
  const resetTableRef = useRef(false)
  const yAxis = query.axis_y

  // The incoming data is reshaped to generate:
  // - reshapedData: holds the full set that will be used by GridChart
  //   to then filter out rows based on `selectedRows` generated by the table
  // - tableData: this has aggregated counts and labels for each row to be
  //   displayed in GridChart. It allows to easily filter and sort aggregate data
  // - indexes - 
  const [reshapedData, tableData, rowKeys, rowLabels] = useMemo(() => {
    try {
      return prepareDataforTable(data, query)
    } catch (e) {
      return [null, [], [], {}]
    }
  }, [query, data])

  const [dataForCharts, setDataForCharts] = useState(noRowsSelected)

  return (
    <Flex flexDirection='column'>
      <Filters
        query={query}
        tableData={tableData}
        setDataForCharts={setDataForCharts}
       />
      <ResizableBox>
        <GridChart
          data={reshapedData}
          selectedRows={dataForCharts}
          rowKeys={rowKeys}
          rowLabels={rowLabels}
          isGrouped={true}
        />
      </ResizableBox>
    </Flex>
  )
}

export default TableView